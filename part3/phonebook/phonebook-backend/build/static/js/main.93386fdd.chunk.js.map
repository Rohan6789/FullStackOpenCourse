{"version":3,"sources":["services/phonebook.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","delete","Filter","filter","setFunc","value","onChange","event","console","log","target","AddPerson","submitFunc","nName","handleName","nNum","handleNum","onSubmit","type","DisplayNames","filterFunc","personList","Notification","message","className","App","useState","name","number","persons","setPersons","newName","setNewName","newNumber","setNewNumber","newFilter","setNewFilter","errorMessage","setErrorMessage","useEffect","pbService","then","response","data","DeleteName","forEach","p","person","catch","handleDeletion","preventDefault","map","n","includes","find","changedPerson","personObject","setTimeout","concat","people","toLowerCase","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.93386fdd.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/persons'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nconst del = (id) => {\n    return axios.delete('http://localhost:3001/api/persons/' + id)\n}\n\nexport default { \n  getAll: getAll, \n  create: create, \n  update: update,\n  del: del\n}","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport pbService from './services/phonebook'\n\n\nconst Filter = ({filter, setFunc}) =>  {\n  \n  const handleFilterRequestChange = (event) => {\n    console.log(event.target.value)\n    setFunc(event.target.value)\n  }\n\n  return(\n\n  <form>\n    <div> filter shown with\n      <input \n        value={filter} \n        onChange={handleFilterRequestChange}\n      />\n    </div>\n  </form>\n)}\n\nconst AddPerson = ({submitFunc, nName, handleName, nNum, handleNum}) => {\n  return (\n    <form onSubmit={submitFunc}>\n        <div> name: \n          <input \n            value={nName}\n            onChange={handleName}\n          />\n        </div>\n        <div> number:\n          <input \n            value={nNum}\n            onChange={handleNum}\n          />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n  )\n}\n\n\nconst DisplayNames = ({filterFunc, personList}) => {\n  \n  return (\n    <ul>\n      {filterFunc(personList)}\n    </ul>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([\n    { name: 'Arto Hellas', number: '040-1234567', id: 0 }\n  ]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n  \n  useEffect(() => {\n    pbService\n      .getAll()\n      .then(response => {\n        setPersons(response.data)\n      })\n  }, [])\n\n  const addPerson = (event) => {\n    event.preventDefault()\n\n    var allNames = persons.map(n => n.name)\n\n    if (allNames.includes(newName)) {\n      const person = persons.find(p => p.name === newName)\n      const changedPerson = { ...person, number: newNumber }\n      var id\n      persons.forEach(p => {\n        if(p.name == newName) {\n          id = p.id\n          console.log(\"triggered\");\n          console.log('a', p, p.name);\n        }\n      }) \n\n      pbService\n      .update(id, changedPerson)\n      .then(response => {\n        setPersons(persons.map(person => person.name !== newName ? person : response.data))\n      })\n      return;\n    }\n\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    //setPersons(persons.concat(personObject))\n    setNewName('')\n\n    setErrorMessage(\n      `Added ${personObject.name}`\n    )\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 5000)\n\n    pbService\n      .create(personObject)\n      .then(response => {\n        setPersons(persons.concat(response.data))\n        setNewName('')\n        setNewNumber('')\n      })\n  }\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const DeleteName = ({ name }) => {\n    return (\n      <form onSubmit={() => handleDeletion(name)}>\n        <div>\n          <button type=\"submit\">delete</button>\n        </div>\n      </form>\n    )\n  }\n  \n\n  function handleDeletion(name) {\n    var id\n    persons.forEach(p => {\n      if(p.name == name) {\n        id = p.id\n        console.log(\"triggered\");\n        console.log('a', p, p.name);\n      }\n    }) \n    pbService\n       .del(id)\n       .then(response => {\n         setPersons(persons.filter(person => person.name !== name))\n         .catch(() => console.log(\"Canâ€™t access \" + id + \" response. Blocked by browser?\"))\n     })\n  }\n\n\n  function filterNames(people) {\n    if(newFilter !== '') {\n      return persons.filter(p => p.name.toLowerCase().includes(newFilter.toLowerCase())).map((person) => \n      <li key={person.name}>{person.name + \" \" + person.number} <DeleteName name={person.name}/> </li>\n      )\n    }\n    else {\n      return persons.map((person) => \n      <li key={person.name}>{person.name + \" \" + person.number} <DeleteName name={person.name}/> </li>\n      )\n    }\n  }\n\n  return (\n    <div>\n      <Notification message={errorMessage} />\n      <h2>Phonebook</h2>\n      <Filter filter={newFilter} setFunc={setNewFilter}/>\n      \n      <h2>add a new</h2>\n      <AddPerson submitFunc={addPerson} nName={newName} handleName={handleNameChange} \n      nNum={newNumber} handleNum={handleNumberChange}/>\n      \n      <h2>Numbers</h2>\n      <DisplayNames filterFunc={filterNames} personList={persons}/>\n      \n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}